/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/workflows/{workflowId}/config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["setConfig"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workflows/{workflowId}/attributes/{attributeName}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["setAttribute"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workflow-states/{stateId}/attributes/{attributeName}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["setAttribute_1"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workflow-entities/{entityId}/attributes/{attributeName}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["setAttribute_2"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workflows": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["list"];
        put?: never;
        post: operations["createWorkflow"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workflows/{workflowId}/workflow-states": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["listStates"];
        put?: never;
        post: operations["createState"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workflows/{workflowId}/workflow-entities": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List all child entities of a workflow */
        get: operations["listByWorkflowId"];
        put?: never;
        /** @description Create an entity for a workflow */
        post: operations["createEntity"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workflows/{workflowId}/attribute-descriptions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["listAttributeDescription"];
        put?: never;
        post: operations["createAttributeDescription"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workflow-states/{workflowStateId}/rules": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["createRule"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workflow-entities/{entityId}/workflow-states/{newStateId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Try moving an entity to a new state */
        patch: operations["moveState"];
        trace?: never;
    };
    "/workflows/{workflowId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getWorkflow"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workflows/{workflowId}/attributes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["listAttributes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workflow-states/{workflowStateId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getState"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workflow-states/{workflowStateId}/workflow-entities": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["listEntityIdsByStateId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workflow-states/{stateId}/attributes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["listAttributes_1"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workflow-entities/{workflowEntityId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getEntity"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workflow-entities/{entityId}/attributes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["listAttributes_2"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        RequestUpdateWorkflowConfig: {
            /**
             * Format: int32
             * @description The state must be owned by the Workflow (initialState.workflowId == workflow.id)
             */
            initialStateId?: number;
        };
        ResponseWorkflow: {
            /** Format: int32 */
            id: number;
            name: string;
            /** Format: int32 */
            userId: number;
            /** Format: int32 */
            clientId: number;
            /** Format: date-time */
            creationTime: string;
            /** Format: date-time */
            updateTime: string;
            /** Format: date-time */
            deletionTime?: string;
            /** Format: int32 */
            initialStateId?: number;
        };
        RequestNewAttribute: {
            integer?: string;
            /** Format: double */
            floating?: number;
            enumeration?: string;
            decimal?: string;
            /** Format: date-time */
            date?: string;
            /** Format: date-time */
            timestamp?: string;
            flag?: boolean;
            text?: string;
        };
        ResponseAttribute: {
            descriptionName: string;
            /** Format: int32 */
            parentWorkflowId: number;
            /** Format: int32 */
            baseEntityId: number;
            /** Format: date-time */
            creationTime: string;
            /** Format: date-time */
            updateTime: string;
            integer?: string;
            /** Format: double */
            floating?: number;
            enumeration?: string;
            decimal?: string;
            /** Format: date-time */
            date?: string;
            /** Format: date-time */
            timestamp?: string;
            flag?: boolean;
            text?: string;
        };
        RequestNewWorkflow: {
            name: string;
        };
        RequestNewWorkflowState: {
            name: string;
        };
        ResponseChangeStateRules: {
            /** Format: int32 */
            fromId: number;
            /** Format: int32 */
            toId: number;
            expressions: string[];
            /** Format: date-time */
            creationTime: string;
            /** Format: date-time */
            updateTime: string;
        };
        ResponseWorkflowState: {
            /** Format: int32 */
            id: number;
            name: string;
            /** Format: int32 */
            userId: number;
            /** Format: int32 */
            clientId: number;
            /** Format: date-time */
            creationTime: string;
            /** Format: date-time */
            updateTime: string;
            /** Format: date-time */
            deletionTime?: string;
            /** Format: int32 */
            workflowId: number;
            changeRules: components["schemas"]["ResponseChangeStateRules"][];
        };
        RequestNewWorkflowEntity: {
            name: string;
        };
        ResponseWorkflowEntity: {
            /** Format: int32 */
            id: number;
            name: string;
            /** Format: int32 */
            userId: number;
            /** Format: int32 */
            clientId: number;
            /** Format: date-time */
            creationTime: string;
            /** Format: date-time */
            updateTime: string;
            /** Format: date-time */
            deletionTime?: string;
            /** Format: int32 */
            workflowId: number;
            /** Format: int32 */
            currentStateId: number;
        };
        RequestNewAttributeDescription: {
            name: string;
            /** @enum {string} */
            refType: "WORKFLOW" | "WORKFLOW_STATE" | "WORKFLOW_ENTITY";
            /** @enum {string} */
            attrType: "INTEGER" | "FLOATING" | "ENUMERATION" | "DECIMAL" | "DATE" | "TIMESTAMP" | "FLAG" | "TEXT";
            expression?: components["schemas"]["WorkflowAttributeExprRule"];
            regex?: components["schemas"]["WorkflowAttributeRegexRule"];
            /** Format: int32 */
            maxLength?: number;
            enumDescription?: string[];
        };
        WorkflowAttributeExprRule: {
            rule?: string;
            description?: string;
            errorText?: string;
        };
        WorkflowAttributeRegexRule: {
            rule?: string;
            description?: string;
            errorText?: string;
        };
        ResponseAttributeDescription: {
            /** Format: int32 */
            parentWorkflowId: number;
            /** @enum {string} */
            refType: "WORKFLOW" | "WORKFLOW_STATE" | "WORKFLOW_ENTITY";
            /** @enum {string} */
            attrType: "INTEGER" | "FLOATING" | "ENUMERATION" | "DECIMAL" | "DATE" | "TIMESTAMP" | "FLAG" | "TEXT";
            name: string;
            /** Format: date-time */
            creationTime: string;
            /** Format: date-time */
            updateTime: string;
            expression?: components["schemas"]["WorkflowAttributeExprRule"];
            regex?: components["schemas"]["WorkflowAttributeRegexRule"];
            /** Format: int32 */
            maxLength?: number;
            enumDescription?: string[];
        };
        RequestSetChangeStateRule: {
            /**
             * Format: int32
             * @description Id of the workflow state that the entity will go to.
             */
            toId: number;
            /** @description The expressions that need to return true so the change may happen */
            expressions: string[];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    setConfig: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workflowId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RequestUpdateWorkflowConfig"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseWorkflow"];
                };
            };
        };
    };
    setAttribute: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workflowId: number;
                attributeName: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RequestNewAttribute"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseAttribute"];
                };
            };
        };
    };
    setAttribute_1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                stateId: number;
                attributeName: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RequestNewAttribute"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseAttribute"];
                };
            };
        };
    };
    setAttribute_2: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                entityId: number;
                attributeName: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RequestNewAttribute"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseAttribute"];
                };
            };
        };
    };
    list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseWorkflow"][];
                };
            };
        };
    };
    createWorkflow: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RequestNewWorkflow"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseWorkflow"];
                };
            };
        };
    };
    listStates: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workflowId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseWorkflowState"][];
                };
            };
        };
    };
    createState: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workflowId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RequestNewWorkflowState"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseWorkflowState"];
                };
            };
        };
    };
    listByWorkflowId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workflowId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseWorkflowEntity"][];
                };
            };
        };
    };
    createEntity: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workflowId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RequestNewWorkflowEntity"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseWorkflowEntity"];
                };
            };
        };
    };
    listAttributeDescription: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workflowId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseAttributeDescription"][];
                };
            };
        };
    };
    createAttributeDescription: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workflowId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RequestNewAttributeDescription"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseAttributeDescription"];
                };
            };
        };
    };
    createRule: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workflowStateId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RequestSetChangeStateRule"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseWorkflowState"];
                };
            };
        };
    };
    moveState: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                entityId: number;
                newStateId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseWorkflowEntity"];
                };
            };
        };
    };
    getWorkflow: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workflowId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseWorkflow"];
                };
            };
        };
    };
    listAttributes: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workflowId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseAttribute"][];
                };
            };
        };
    };
    getState: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workflowStateId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseWorkflowState"];
                };
            };
        };
    };
    listEntityIdsByStateId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workflowStateId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseWorkflowEntity"][];
                };
            };
        };
    };
    listAttributes_1: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                stateId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseAttribute"][];
                };
            };
        };
    };
    getEntity: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workflowEntityId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseWorkflowEntity"];
                };
            };
        };
    };
    listAttributes_2: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                entityId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["ResponseAttribute"][];
                };
            };
        };
    };
}
